<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on </title>
    <link>https://thehecklers.com/post/</link>
    <description>Recent content in Posts on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sat, 01 Jun 2019 12:52:04 +0300</lastBuildDate>
    
	<atom:link href="https://thehecklers.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Three Things About Me</title>
      <link>https://thehecklers.com/post/three-things-about-me/</link>
      <pubDate>Sat, 01 Jun 2019 12:52:04 +0300</pubDate>
      
      <guid>https://thehecklers.com/post/three-things-about-me/</guid>
      <description>I was contacted recently for a Java magazine profile. I was incredibly honored to be asked, as you might imagine! But it got me thinking&amp;#8230;&amp;#8203;interviews and conversations are short, and to be frank, I think we could all understand and empathize with each other better if we&amp;#8217;d just share a little more of ourselves. All of us. And since I wouldn&amp;#8217;t expect of anyone else what I wouldn&amp;#8217;t be willing to do, I figured it only fair to start the ball rolling.</description>
    </item>
    
    <item>
      <title>Building a Developer Workstation</title>
      <link>https://thehecklers.com/post/building-a-developer-workstation/</link>
      <pubDate>Sat, 13 Oct 2018 19:34:34 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/building-a-developer-workstation/</guid>
      <description>I recently got a (very nice!) new 2018 MacBook Pro (MBP) with 32G of RAM &amp;amp; a 550GB SSD. It&amp;#8217;s fast &amp;amp; sleek, and you could hardly wish for more in a traveling developer&amp;#8217;s machine than it provides. Other than a few speedbumps I hit with migration from my old MBP (interesting to resolve but minor on balance) and upgrading MacOS to Mojave (Sentinel&amp;#8217;s fault, not Apple&amp;#8217;s), I love this machine!</description>
    </item>
    
    <item>
      <title>Register Instances Eureka</title>
      <link>https://thehecklers.com/post/register-instances-eureka/</link>
      <pubDate>Mon, 11 Jun 2018 20:53:02 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/register-instances-eureka/</guid>
      <description>When developing Spring Boot + Spring Cloud microservices, most often we devs run them locally, also running local instances of Spring Cloud Config Server and Spring Cloud Netflix Eureka to provide essential scaffolding for our microservices-in-development and to more closely replicate our test &amp;amp; production environments. Many times, we simply run a single instance of a microservice under development, which works with nearly no effort on our part: provide a desired port number for the service either via internal properties (usually in the project&amp;#8217;s application.</description>
    </item>
    
    <item>
      <title>Why Wait for Jdk 10</title>
      <link>https://thehecklers.com/post/why-wait-for-jdk-10/</link>
      <pubDate>Thu, 19 Apr 2018 21:10:04 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/why-wait-for-jdk-10/</guid>
      <description>Lombok is one of those libraries that plugs several small gaps in fairly basic Java functionality. It covers so many small gaps, in fact, that it&amp;#8217;s easy to use it to provide some very useful capabilities for years while overlooking other capabilities it quietly provides just as well.
 This happened to me recently, as I mentioned in the tweet below. Caveat: I&amp;#8217;m for code clarity first and foremost, so I don&amp;#8217;t recommend sacrificing readability&amp;#8230;&amp;#8203;but if there is a way to be more concise, i.</description>
    </item>
    
    <item>
      <title>Un curso intensivo: Como utilizar Spring Cloud Services en PAS</title>
      <link>https://thehecklers.com/post/un-curso-intensivo-como-utilizar-spring-cloud-services-en-pas/</link>
      <pubDate>Tue, 20 Feb 2018 21:51:12 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/un-curso-intensivo-como-utilizar-spring-cloud-services-en-pas/</guid>
      <description>This article is available in English at Getting Started with Spring Cloud Services on Pivotal Application Service.
   Cuando se trata de crear una arquitectura de microservicios robusta y resistente ubicada en la nube, los componentes de Spring Cloud/Netflix OSS son habilitadores conocidos y respetados. Ciertos modelos y mecanismos se han probado absolutamente esenciales para lograr alta velocidad (en desarollo) y alta disponibilidad (en producción), y Spring Cloud/Netflix OSS tiene unos de los &#34;</description>
    </item>
    
    <item>
      <title>Comment ça va?</title>
      <link>https://thehecklers.com/post/comment-%C3%A7a-va/</link>
      <pubDate>Sun, 24 Sep 2017 18:27:08 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/comment-%C3%A7a-va/</guid>
      <description>I had been deep in code for the preceding few days (mine and others&#39;) and had achieved a few insights by poring over actual code (vs. comments and/or commentary) when this quote crossed my radar:
 
 Being an enthusiastic quote lover, I of course shared it on Twitter, not expecting the various interpretations it solicited. As an aside, this is what happens when you share something without a particular context: people rightfully supply their own.</description>
    </item>
    
    <item>
      <title>Using Spring Boot Actuator integrations with Pivotal Cloud Foundry 1.11</title>
      <link>https://thehecklers.com/post/using-spring-boot-actuator-integrations-with-pivotal-cloud-foundry-1.11/</link>
      <pubDate>Sun, 02 Jul 2017 19:10:50 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/using-spring-boot-actuator-integrations-with-pivotal-cloud-foundry-1.11/</guid>
      <description>I recently wrote a tutorial demonstrating how to leverage the integrations between Spring Boot Actuator and Pivotal Cloud Foundry 1.11, posted here in the Pivotal content library: &#34;TUTORIAL: Using Spring Boot Actuator Integrations With Pivotal Cloud Foundry 1.11&#34;).
 Here is a quick summary of the article&amp;#8217;s content:
  Adding Actuator to your Spring Boot application deployed on Pivotal Cloud Foundry gets you the following production-ready features:
   Health Check column &amp;amp; expanded information in Instances section</description>
    </item>
    
    <item>
      <title>Getting up &amp; running quickly with Spring Cloud Sleuth</title>
      <link>https://thehecklers.com/post/getting-up-running-quickly-with-spring-cloud-sleuth/</link>
      <pubDate>Tue, 27 Jun 2017 19:55:02 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/getting-up-running-quickly-with-spring-cloud-sleuth/</guid>
      <description>As you begin to divide conglomerate functionality into discrete, decoupled microservices, you introduce a number of opportunities and challenges into your system(s). The opportunities are often well-known, including (and especially!) development velocity, fidelity/fit (functionality matches requirements), scalability, and a host of other “ilities”.
 Challenges also exist of course, including the question of how to gain visibility into end-to-end interactions involving multiple microservices across process and network boundaries. Spring Cloud Sleuth provides a lightweight, configurable, and easy way to begin capturing trace information within your distributed system.</description>
    </item>
    
    <item>
      <title>T4SD (Tips 4 Spring Devs): How to get Spring Boot REST endpoints to speak XML</title>
      <link>https://thehecklers.com/post/t4sd-tips-4-spring-devs-how-to-get-spring-boot-rest-endpoints-to-speak-xml/</link>
      <pubDate>Tue, 20 Jun 2017 20:27:09 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/t4sd-tips-4-spring-devs-how-to-get-spring-boot-rest-endpoints-to-speak-xml/</guid>
      <description>Many of us use JSON almost exclusively now, which is generally a good thing. But what happens when you need to “speak XML” with your Spring Boot REST endpoints?
 XML support in Spring Boot’s REST endpoints is not enabled by default, but adding it isn’t difficult at all. Simply add the following dependency to your POM (or similar entry to your Gradle build file, if that’s the way you roll) and rebuild:</description>
    </item>
    
    <item>
      <title>T4SD (Tips 4 Spring Devs): Request header filtering in @RequestMapping</title>
      <link>https://thehecklers.com/post/t4sd-tips-4-spring-devs-request-header-filtering-in-requestmapping/</link>
      <pubDate>Thu, 08 Jun 2017 20:37:31 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/t4sd-tips-4-spring-devs-request-header-filtering-in-requestmapping/</guid>
      <description>Just a quick tip for the Spring fans out there&amp;#8230;&amp;#8203;
 I was leading a workshop yesterday and this question arose: Is it possible to filter requests by header content using Spring’s various request mapping (@RequestMapping, @GetMapping, @PostMapping, et al) annotations? Not only is it possible, it’s easy, and the implementation is concise &amp;amp; clean! Let’s take a look.  The code Here is a simple example that filters based upon the content-type of the header:</description>
    </item>
    
    <item>
      <title>T4SD (Tips 4 Spring Devs): Spring Boot Actuator /actuator endpoint</title>
      <link>https://thehecklers.com/post/t4sd-tips-4-spring-devs-spring-boot-actuator-actuator-endpoint/</link>
      <pubDate>Mon, 05 Jun 2017 20:46:17 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/t4sd-tips-4-spring-devs-spring-boot-actuator-actuator-endpoint/</guid>
      <description>Just a quick tip for the Spring fans out there&amp;#8230;&amp;#8203;
 If you’ve decided to try out Spring Boot Actuator – and if you haven’t you really should! – you may have run into one of two interesting hitches that are easily resolved:
  You are unable to access any of the various Actuator endpoints (/beans, /env, et al)
  You can access those endpoints and yet are unable to access /actuator, the primary (navigable) Actuator endpoint</description>
    </item>
    
    <item>
      <title>How to Create an Alexa Skill with Spring Boot &amp; Cloud Foundry</title>
      <link>https://thehecklers.com/post/how-to-create-an-alexa-skill-with-spring-boot-cloud-foundry/</link>
      <pubDate>Mon, 06 Mar 2017 20:58:10 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/how-to-create-an-alexa-skill-with-spring-boot-cloud-foundry/</guid>
      <description>I’ve been working with Amazon’s Alexa &amp;amp; the Echo family of devices for the past several months and have created a couple of pretty useful and/or interesting skills. The first one I liked well enough to publish was QOTD, a Quote of the Day app that retrieves and reads a random quote per request. The second was Master Control Program, which enabled voice control of my home renewable energy system’s various inputs and controls.</description>
    </item>
    
    <item>
      <title>Building a Portable, Self-powering, Cloud-Connected IoT demo</title>
      <link>https://thehecklers.com/post/building-a-portable-self-powering-cloud-connected-iot-demo/</link>
      <pubDate>Sun, 11 Sep 2016 00:00:21 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/building-a-portable-self-powering-cloud-connected-iot-demo/</guid>
      <description>Or “How to build a portable self-powered, self-licking ice cream cone.” 😀
 
 Several years ago, I started building what I referred to affectionately as a self-licking ice cream cone: a Renewable Energy (RE) system that powered the same IoT system that monitored it. I’ve given several talks about this system, both its hardware and its software stack, and there are so many useful (and scalable) lessons I’ve learned that I really enjoy sharing.</description>
    </item>
    
    <item>
      <title>T4SD (Tips 4 Spring Devs): Exposing Query Methods in Spring Data REST</title>
      <link>https://thehecklers.com/post/t4sd-tips-4-spring-devs-exposing-query-methods-in-spring-data-rest/</link>
      <pubDate>Tue, 26 Jul 2016 15:46:25 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/t4sd-tips-4-spring-devs-exposing-query-methods-in-spring-data-rest/</guid>
      <description>Spring Data REST takes an opinionated approach to exposing Spring Data repositories via REST endpoints, covering the 80-90% use case with a minimum of code and fuss. But did you know that it provides a no-lifting-required mechanism for exposing query methods you define on those repositories as well?
 Let’s say you create a method like this:
  Referencing that bit of functionality directly is simple, just append /search/&amp;lt;methodName&amp;gt; to the collection endpoint:</description>
    </item>
    
    <item>
      <title>Random Route in Cloud Foundry</title>
      <link>https://thehecklers.com/post/random-route-in-cloud-foundry/</link>
      <pubDate>Sat, 16 Jul 2016 15:57:04 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/random-route-in-cloud-foundry/</guid>
      <description>I’ve only been working with Pivotal Cloud Foundry since September 2015, but I’ve learned a great deal about it since then. I also realize there is much (much much) more to learn! The world doesn’t stand still, after all, and there are many stones I’ve yet to turn.
 Sometimes I revisit something small-but-useful that I discovered long ago that I didn’t take the time to share at the time. I intend to be better about that, beginning now.</description>
    </item>
    
    <item>
      <title>Nighthacking Interview: Jfokus</title>
      <link>https://thehecklers.com/post/nighthacking-interview-jfokus/</link>
      <pubDate>Fri, 12 Feb 2016 16:04:37 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/nighthacking-interview-jfokus/</guid>
      <description>At Jfokus this week, I was honored to be interviewed by Stephen Chin of Nighthacking.com. We discussed the Renewable Energy system I built and developed using industrial Internet of Things (IoT) concepts and Domain Driven Design principles. The core of the system is Java SE Embedded on the IoT Gateway device, Spring Boot + Cloud Foundry (CF) for the backend services, and an HTML5/JavaScript frontend application also delivered via CF…all accessible from any device, anywhere in the world.</description>
    </item>
    
    <item>
      <title>Spring Boot for IoT Developers: Getting Started</title>
      <link>https://thehecklers.com/post/spring-boot-for-iot-developers-getting-started/</link>
      <pubDate>Mon, 01 Feb 2016 16:18:32 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/spring-boot-for-iot-developers-getting-started/</guid>
      <description>It often surprises other devs when I suggest that Spring Boot is a perfect addition to the IoT developer’s toolbox. If you’re deep into IoT and have the luxury of another group providing all of your back-end and/or cloud platform code, that’s perfectly understandable. However, if you’re a full-stack developer, by choice or necessity, you need to know this! Grab a chair and a cup of coffee; I think you’ll find this interesting (and useful).</description>
    </item>
    
    <item>
      <title>Springing Forward</title>
      <link>https://thehecklers.com/post/springing-forward/</link>
      <pubDate>Mon, 02 Nov 2015 17:19:04 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/springing-forward/</guid>
      <description>At JavaOne last week, several people asked me how my work at Pivotal was going, and it occurred to me: I had been so busy diving into all the new toys that I hadn’t written anything about it! This is a first step toward remedying that. 🙂
 At the risk of this post sounding like a short commercial, I’m deeply impressed with the consistency of vision and the depth and breadth of capabilities Pivotal offers innovative organizations and developers.</description>
    </item>
    
    <item>
      <title>A Pivotal Decision</title>
      <link>https://thehecklers.com/post/a-pivotal-decision/</link>
      <pubDate>Thu, 10 Sep 2015 17:24:37 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/a-pivotal-decision/</guid>
      <description>pivotal:
  Of, relating to, or serving as a pivot.
  Being of vital or central importance; crucial.
     As has been widely reported, last week I was among those at Oracle who were “let go” – a sanitized expression that is meant to diminish the indescribable impact of being fired due to circumstances far outside one’s knowledge or ability to influence. Details aren’t important, but suffice it to say that my teammates and I were&amp;#8230;&amp;#8203;surprised.</description>
    </item>
    
    <item>
      <title>The Secret Sauce: How to Connect Your Raspberry Pi to a Hidden SSID</title>
      <link>https://thehecklers.com/post/the-secret-sauce-how-to-connect-your-raspberry-pi-to-a-hidden-ssid/</link>
      <pubDate>Fri, 27 Feb 2015 17:29:35 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/the-secret-sauce-how-to-connect-your-raspberry-pi-to-a-hidden-ssid/</guid>
      <description>When I got my first Raspberry Pi Model B (not long after they first became available – remember when they only had 256M?!?), I wanted to configure it to use a wifi adapter. Even with approved, compliant adapters, this wasn’t for the faint of heart; many steps, scripts, and secret incantations were required to get everything to connect, even in the best of circumstances.
 Fast-forward to today, when wifi adapter drivers are included in the base Raspbian build.</description>
    </item>
    
    <item>
      <title>Microservices: The View from 1000 Feet (or 305 Meters If You Prefer)</title>
      <link>https://thehecklers.com/post/microservices-the-view-from-1000-feet-or-305-meters-if-you-prefer/</link>
      <pubDate>Mon, 12 Jan 2015 17:50:00 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/microservices-the-view-from-1000-feet-or-305-meters-if-you-prefer/</guid>
      <description>Intro I started this post a couple months ago, and between a busy holiday season and constant revisions, I’m only now polishing and posting it. For those who knew it was in the pipeline, thank you for your patience. 🙂
 I have another article in the works that will delve into more technical aspects of the microservices discussion; hopefully I’ll get that posted by this time next year (!). In this one, though, I’d like to stay as much as possible at the conceptual level, dipping into the details only to reference them for consideration and future discussion.</description>
    </item>
    
    <item>
      <title>Secure Email From Java</title>
      <link>https://thehecklers.com/post/secure-email-from-java/</link>
      <pubDate>Mon, 14 Jan 2013 19:09:52 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/secure-email-from-java/</guid>
      <description>Cross-posted from The Java Jungle by Mark Heckler
 I’ve been working recently with a client to do some rather useful things with notifications, and one of them involved sending a secure email from within a Java program. We encountered some interesting (translation: weird!) challenges, and in overcoming them, I worked out a reasonably straightforward path through the minefield. If you’ve been thinking about secure-email-enabling your Java app but aren’t sure where to start, hopefully this will serve as a fairly quick and mostly painless primer.</description>
    </item>
    
    <item>
      <title>Netbeans Jsf Mysql Primary Key</title>
      <link>https://thehecklers.com/post/netbeans-jsf-mysql-primary-key/</link>
      <pubDate>Fri, 13 Apr 2012 17:43:28 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/netbeans-jsf-mysql-primary-key/</guid>
      <description>Cross-posted from The Java Jungle by Mark Heckler
 I recently had the opportunity to spin up a small web application using JSF and MySQL. Having developed JSF apps with Oracle Database back-ends before and possessing some small familiarity with MySQL (sans JSF), I thought this would be a cakewalk. Things did go pretty smoothly…but there was one little “gotcha” that took more time than the few seconds it really warranted.</description>
    </item>
    
  </channel>
</rss>