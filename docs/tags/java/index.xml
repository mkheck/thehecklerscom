<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on </title>
    <link>https://thehecklers.com/tags/java/</link>
    <description>Recent content in java on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Mon, 11 Jun 2018 20:53:02 -0600</lastBuildDate>
    
	<atom:link href="https://thehecklers.com/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Register Instances Eureka</title>
      <link>https://thehecklers.com/post/register-instances-eureka/</link>
      <pubDate>Mon, 11 Jun 2018 20:53:02 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/register-instances-eureka/</guid>
      <description>When developing Spring Boot + Spring Cloud microservices, most often we devs run them locally, also running local instances of Spring Cloud Config Server and Spring Cloud Netflix Eureka to provide essential scaffolding for our microservices-in-development and to more closely replicate our test &amp;amp; production environments. Many times, we simply run a single instance of a microservice under development, which works with nearly no effort on our part: provide a desired port number for the service either via internal properties (usually in the project&amp;#8217;s application.</description>
    </item>
    
    <item>
      <title>Getting up &amp; running quickly with Spring Cloud Sleuth</title>
      <link>https://thehecklers.com/post/getting-up-running-quickly-with-spring-cloud-sleuth/</link>
      <pubDate>Tue, 27 Jun 2017 19:55:02 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/getting-up-running-quickly-with-spring-cloud-sleuth/</guid>
      <description>As you begin to divide conglomerate functionality into discrete, decoupled microservices, you introduce a number of opportunities and challenges into your system(s). The opportunities are often well-known, including (and especially!) development velocity, fidelity/fit (functionality matches requirements), scalability, and a host of other ‚Äúilities‚Äù.
 Challenges also exist of course, including the question of how to gain visibility into end-to-end interactions involving multiple microservices across process and network boundaries. Spring Cloud Sleuth provides a lightweight, configurable, and easy way to begin capturing trace information within your distributed system.</description>
    </item>
    
    <item>
      <title>T4SD (Tips 4 Spring Devs): Request header filtering in @RequestMapping</title>
      <link>https://thehecklers.com/post/t4sd-tips-4-spring-devs-request-header-filtering-in-requestmapping/</link>
      <pubDate>Thu, 08 Jun 2017 20:37:31 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/t4sd-tips-4-spring-devs-request-header-filtering-in-requestmapping/</guid>
      <description>Just a quick tip for the Spring fans out there&amp;#8230;&amp;#8203;
 I was leading¬†a workshop¬†yesterday and this question arose: Is it possible to filter requests by header content using Spring‚Äôs various request mapping (@RequestMapping, @GetMapping, @PostMapping, et al) annotations? Not only is it possible, it‚Äôs easy, and the implementation is concise &amp;amp; clean! Let‚Äôs take a look.¬† The code Here is a simple example that filters based upon the content-type of the header:</description>
    </item>
    
    <item>
      <title>T4SD (Tips 4 Spring Devs): Spring Boot Actuator /actuator endpoint</title>
      <link>https://thehecklers.com/post/t4sd-tips-4-spring-devs-spring-boot-actuator-/actuator-endpoint/</link>
      <pubDate>Mon, 05 Jun 2017 20:46:17 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/t4sd-tips-4-spring-devs-spring-boot-actuator-/actuator-endpoint/</guid>
      <description>Just a quick tip for the Spring fans out there&amp;#8230;&amp;#8203;
 If you‚Äôve decided to try out Spring Boot Actuator ‚Äì and if you haven‚Äôt you really should! ‚Äì¬†you may have run into one of two interesting hitches that are easily resolved:
  You are unable to access any¬†of the various Actuator endpoints (/beans, /env, et al)
  You can access those endpoints and yet are unable to access /actuator, the primary (navigable) Actuator endpoint</description>
    </item>
    
    <item>
      <title>Building a Portable, Self-powering, Cloud-Connected IoT demo</title>
      <link>https://thehecklers.com/post/building-a-portable-self-powering-cloud-connected-iot-demo/</link>
      <pubDate>Sun, 11 Sep 2016 00:00:21 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/building-a-portable-self-powering-cloud-connected-iot-demo/</guid>
      <description>Or ‚ÄúHow to build a portable self-powered, self-licking ice cream cone.‚Äù üòÄ
 
 Several years ago, I started building what I referred to affectionately as a self-licking ice cream cone: a Renewable Energy (RE) system that powered the same IoT system that monitored it. I‚Äôve given several talks about this system, both its hardware and its software stack, and there are so many useful (and scalable) lessons¬†I‚Äôve learned that I really enjoy sharing.</description>
    </item>
    
    <item>
      <title>Nighthacking Interview: Jfokus</title>
      <link>https://thehecklers.com/post/nighthacking-interview-jfokus/</link>
      <pubDate>Fri, 12 Feb 2016 16:04:37 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/nighthacking-interview-jfokus/</guid>
      <description>At Jfokus this week, I was honored to be interviewed by Stephen Chin of Nighthacking.com. We discussed the¬†Renewable Energy system I built and developed using industrial¬†Internet of Things (IoT) concepts and Domain Driven Design principles. The core of the system is Java SE Embedded on the IoT Gateway device, Spring Boot + Cloud Foundry (CF) for the backend services, and¬†an¬†HTML5/JavaScript frontend application also delivered via CF‚Ä¶all accessible from any device, anywhere in the world.</description>
    </item>
    
    <item>
      <title>Secure Email From Java</title>
      <link>https://thehecklers.com/post/secure-email-from-java/</link>
      <pubDate>Mon, 14 Jan 2013 19:09:52 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/secure-email-from-java/</guid>
      <description>Cross-posted from The Java Jungle by Mark Heckler
 I‚Äôve been working recently with a client to do some rather useful things with notifications, and one of them involved sending a secure email from within a Java program. We encountered some interesting (translation: weird!) challenges, and in overcoming them, I worked out a reasonably straightforward path through the minefield. If you‚Äôve been thinking about secure-email-enabling your Java app but aren‚Äôt sure where to start, hopefully this will serve as a fairly quick and mostly painless primer.</description>
    </item>
    
    <item>
      <title>Netbeans Jsf Mysql Primary Key</title>
      <link>https://thehecklers.com/post/netbeans-jsf-mysql-primary-key/</link>
      <pubDate>Fri, 13 Apr 2012 17:43:28 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/netbeans-jsf-mysql-primary-key/</guid>
      <description>Cross-posted from The Java Jungle by Mark Heckler
 I recently had the opportunity to spin up a small web application using JSF and MySQL. Having developed JSF apps with Oracle Database back-ends before and possessing some small familiarity with MySQL (sans JSF), I thought this would be a cakewalk. Things did go pretty smoothly‚Ä¶but there was one little ‚Äúgotcha‚Äù that took more time than the few seconds it really warranted.</description>
    </item>
    
  </channel>
</rss>