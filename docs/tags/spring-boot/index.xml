<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring Boot on </title>
    <link>https://thehecklers.com/tags/spring-boot/</link>
    <description>Recent content in Spring Boot on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Mon, 11 Jun 2018 20:53:02 -0600</lastBuildDate>
    
	<atom:link href="https://thehecklers.com/tags/spring-boot/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Register Instances Eureka</title>
      <link>https://thehecklers.com/post/register-instances-eureka/</link>
      <pubDate>Mon, 11 Jun 2018 20:53:02 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/register-instances-eureka/</guid>
      <description>When developing Spring Boot + Spring Cloud microservices, most often we devs run them locally, also running local instances of Spring Cloud Config Server and Spring Cloud Netflix Eureka to provide essential scaffolding for our microservices-in-development and to more closely replicate our test &amp;amp; production environments. Many times, we simply run a single instance of a microservice under development, which works with nearly no effort on our part: provide a desired port number for the service either via internal properties (usually in the project&amp;#8217;s application.</description>
    </item>
    
    <item>
      <title>Un curso intensivo: Como utilizar Spring Cloud Services en PAS</title>
      <link>https://thehecklers.com/post/un-curso-intensivo-como-utilizar-spring-cloud-services-en-pas/</link>
      <pubDate>Tue, 20 Feb 2018 21:51:12 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/un-curso-intensivo-como-utilizar-spring-cloud-services-en-pas/</guid>
      <description>This article is available in English at Getting Started with Spring Cloud Services on Pivotal Application Service.
   Cuando se trata de crear una arquitectura de microservicios robusta y resistente ubicada en la nube, los componentes de Spring Cloud/Netflix OSS son habilitadores conocidos y respetados. Ciertos modelos y mecanismos se han probado absolutamente esenciales para lograr alta velocidad (en desarollo) y alta disponibilidad (en producción), y Spring Cloud/Netflix OSS tiene unos de los &#34;</description>
    </item>
    
    <item>
      <title>Using Spring Boot Actuator integrations with Pivotal Cloud Foundry 1.11</title>
      <link>https://thehecklers.com/post/using-spring-boot-actuator-integrations-with-pivotal-cloud-foundry-1.11/</link>
      <pubDate>Sun, 02 Jul 2017 19:10:50 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/using-spring-boot-actuator-integrations-with-pivotal-cloud-foundry-1.11/</guid>
      <description>I recently wrote a tutorial demonstrating how to leverage the integrations between Spring Boot Actuator and Pivotal Cloud Foundry 1.11, posted here in the Pivotal content library: &#34;TUTORIAL: Using Spring Boot Actuator Integrations With Pivotal Cloud Foundry 1.11&#34;).
 Here is a quick summary of the article&amp;#8217;s content:
  Adding Actuator to your Spring Boot application deployed on Pivotal Cloud Foundry gets you the following production-ready features:
   Health Check column &amp;amp; expanded information in Instances section</description>
    </item>
    
    <item>
      <title>Getting up &amp; running quickly with Spring Cloud Sleuth</title>
      <link>https://thehecklers.com/post/getting-up-running-quickly-with-spring-cloud-sleuth/</link>
      <pubDate>Tue, 27 Jun 2017 19:55:02 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/getting-up-running-quickly-with-spring-cloud-sleuth/</guid>
      <description>As you begin to divide conglomerate functionality into discrete, decoupled microservices, you introduce a number of opportunities and challenges into your system(s). The opportunities are often well-known, including (and especially!) development velocity, fidelity/fit (functionality matches requirements), scalability, and a host of other “ilities”.
 Challenges also exist of course, including the question of how to gain visibility into end-to-end interactions involving multiple microservices across process and network boundaries. Spring Cloud Sleuth provides a lightweight, configurable, and easy way to begin capturing trace information within your distributed system.</description>
    </item>
    
    <item>
      <title>T4SD (Tips 4 Spring Devs): How to get Spring Boot REST endpoints to speak XML</title>
      <link>https://thehecklers.com/post/t4sd-tips-4-spring-devs-how-to-get-spring-boot-rest-endpoints-to-speak-xml/</link>
      <pubDate>Tue, 20 Jun 2017 20:27:09 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/t4sd-tips-4-spring-devs-how-to-get-spring-boot-rest-endpoints-to-speak-xml/</guid>
      <description>Many of us use JSON almost exclusively now, which is generally a good thing. But what happens when you need to “speak XML” with your Spring Boot REST endpoints?
 XML support in Spring Boot’s REST endpoints is not enabled by default, but adding it isn’t difficult at all. Simply add the following dependency to your POM (or similar entry to your Gradle build file, if that’s the way you roll) and rebuild:</description>
    </item>
    
    <item>
      <title>T4SD (Tips 4 Spring Devs): Request header filtering in @RequestMapping</title>
      <link>https://thehecklers.com/post/t4sd-tips-4-spring-devs-request-header-filtering-in-requestmapping/</link>
      <pubDate>Thu, 08 Jun 2017 20:37:31 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/t4sd-tips-4-spring-devs-request-header-filtering-in-requestmapping/</guid>
      <description>Just a quick tip for the Spring fans out there&amp;#8230;&amp;#8203;
 I was leading a workshop yesterday and this question arose: Is it possible to filter requests by header content using Spring’s various request mapping (@RequestMapping, @GetMapping, @PostMapping, et al) annotations? Not only is it possible, it’s easy, and the implementation is concise &amp;amp; clean! Let’s take a look.  The code Here is a simple example that filters based upon the content-type of the header:</description>
    </item>
    
    <item>
      <title>T4SD (Tips 4 Spring Devs): Spring Boot Actuator /actuator endpoint</title>
      <link>https://thehecklers.com/post/t4sd-tips-4-spring-devs-spring-boot-actuator-actuator-endpoint/</link>
      <pubDate>Mon, 05 Jun 2017 20:46:17 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/t4sd-tips-4-spring-devs-spring-boot-actuator-actuator-endpoint/</guid>
      <description>Just a quick tip for the Spring fans out there&amp;#8230;&amp;#8203;
 If you’ve decided to try out Spring Boot Actuator – and if you haven’t you really should! – you may have run into one of two interesting hitches that are easily resolved:
  You are unable to access any of the various Actuator endpoints (/beans, /env, et al)
  You can access those endpoints and yet are unable to access /actuator, the primary (navigable) Actuator endpoint</description>
    </item>
    
    <item>
      <title>How to Create an Alexa Skill with Spring Boot &amp; Cloud Foundry</title>
      <link>https://thehecklers.com/post/how-to-create-an-alexa-skill-with-spring-boot-cloud-foundry/</link>
      <pubDate>Mon, 06 Mar 2017 20:58:10 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/how-to-create-an-alexa-skill-with-spring-boot-cloud-foundry/</guid>
      <description>I’ve been working with Amazon’s Alexa &amp;amp; the Echo family of devices for the past several months and have created a couple of pretty useful and/or interesting skills. The first one I liked well enough to publish was QOTD, a Quote of the Day app that retrieves and reads a random quote per request. The second was Master Control Program, which enabled voice control of my home renewable energy system’s various inputs and controls.</description>
    </item>
    
    <item>
      <title>Nighthacking Interview: Jfokus</title>
      <link>https://thehecklers.com/post/nighthacking-interview-jfokus/</link>
      <pubDate>Fri, 12 Feb 2016 16:04:37 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/nighthacking-interview-jfokus/</guid>
      <description>At Jfokus this week, I was honored to be interviewed by Stephen Chin of Nighthacking.com. We discussed the Renewable Energy system I built and developed using industrial Internet of Things (IoT) concepts and Domain Driven Design principles. The core of the system is Java SE Embedded on the IoT Gateway device, Spring Boot + Cloud Foundry (CF) for the backend services, and an HTML5/JavaScript frontend application also delivered via CF…all accessible from any device, anywhere in the world.</description>
    </item>
    
    <item>
      <title>Spring Boot for IoT Developers: Getting Started</title>
      <link>https://thehecklers.com/post/spring-boot-for-iot-developers-getting-started/</link>
      <pubDate>Mon, 01 Feb 2016 16:18:32 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/spring-boot-for-iot-developers-getting-started/</guid>
      <description>It often surprises other devs when I suggest that Spring Boot is a perfect addition to the IoT developer’s toolbox. If you’re deep into IoT and have the luxury of another group providing all of your back-end and/or cloud platform code, that’s perfectly understandable. However, if you’re a full-stack developer, by choice or necessity, you need to know this! Grab a chair and a cup of coffee; I think you’ll find this interesting (and useful).</description>
    </item>
    
  </channel>
</rss>