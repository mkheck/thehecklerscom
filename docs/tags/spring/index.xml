<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring on </title>
    <link>https://thehecklers.com/tags/spring/</link>
    <description>Recent content in Spring on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Mon, 11 Jun 2018 20:53:02 -0600</lastBuildDate>
    
	<atom:link href="https://thehecklers.com/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Register Instances Eureka</title>
      <link>https://thehecklers.com/post/register-instances-eureka/</link>
      <pubDate>Mon, 11 Jun 2018 20:53:02 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/register-instances-eureka/</guid>
      <description>When developing Spring Boot + Spring Cloud microservices, most often we devs run them locally, also running local instances of Spring Cloud Config Server and Spring Cloud Netflix Eureka to provide essential scaffolding for our microservices-in-development and to more closely replicate our test &amp;amp; production environments. Many times, we simply run a single instance of a microservice under development, which works with nearly no effort on our part: provide a desired port number for the service either via internal properties (usually in the project&amp;#8217;s application.</description>
    </item>
    
    <item>
      <title>Un curso intensivo: Como utilizar Spring Cloud Services en PAS</title>
      <link>https://thehecklers.com/post/un-curso-intensivo-como-utilizar-spring-cloud-services-en-pas/</link>
      <pubDate>Tue, 20 Feb 2018 21:51:12 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/un-curso-intensivo-como-utilizar-spring-cloud-services-en-pas/</guid>
      <description>This article is available in English at Getting Started with Spring Cloud Services on Pivotal Application Service.
   Cuando se trata de crear una arquitectura de microservicios robusta y resistente ubicada en la nube, los componentes de Spring Cloud/Netflix OSS son habilitadores conocidos y respetados. Ciertos modelos y mecanismos se han probado absolutamente esenciales para lograr alta velocidad (en desarollo) y alta disponibilidad (en producci√≥n), y Spring Cloud/Netflix OSS tiene unos de los &#34;</description>
    </item>
    
    <item>
      <title>Getting up &amp; running quickly with Spring Cloud Sleuth</title>
      <link>https://thehecklers.com/post/getting-up-running-quickly-with-spring-cloud-sleuth/</link>
      <pubDate>Tue, 27 Jun 2017 19:55:02 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/getting-up-running-quickly-with-spring-cloud-sleuth/</guid>
      <description>As you begin to divide conglomerate functionality into discrete, decoupled microservices, you introduce a number of opportunities and challenges into your system(s). The opportunities are often well-known, including (and especially!) development velocity, fidelity/fit (functionality matches requirements), scalability, and a host of other ‚Äúilities‚Äù.
 Challenges also exist of course, including the question of how to gain visibility into end-to-end interactions involving multiple microservices across process and network boundaries. Spring Cloud Sleuth provides a lightweight, configurable, and easy way to begin capturing trace information within your distributed system.</description>
    </item>
    
    <item>
      <title>T4SD (Tips 4 Spring Devs): How to get Spring Boot REST endpoints to speak XML</title>
      <link>https://thehecklers.com/post/t4sd-tips-4-spring-devs-how-to-get-spring-boot-rest-endpoints-to-speak-xml/</link>
      <pubDate>Tue, 20 Jun 2017 20:27:09 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/t4sd-tips-4-spring-devs-how-to-get-spring-boot-rest-endpoints-to-speak-xml/</guid>
      <description>Many of us use JSON almost exclusively now, which is generally a good thing. But what happens when you need to ‚Äúspeak XML‚Äù with your Spring Boot REST endpoints?
 XML support in Spring Boot‚Äôs REST endpoints is not enabled by default, but adding it¬†isn‚Äôt difficult at all. Simply add the following dependency to your POM (or similar entry to your Gradle build file, if that‚Äôs the way you roll) and rebuild:</description>
    </item>
    
    <item>
      <title>T4SD (Tips 4 Spring Devs): Request header filtering in @RequestMapping</title>
      <link>https://thehecklers.com/post/t4sd-tips-4-spring-devs-request-header-filtering-in-requestmapping/</link>
      <pubDate>Thu, 08 Jun 2017 20:37:31 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/t4sd-tips-4-spring-devs-request-header-filtering-in-requestmapping/</guid>
      <description>Just a quick tip for the Spring fans out there&amp;#8230;&amp;#8203;
 I was leading¬†a workshop¬†yesterday and this question arose: Is it possible to filter requests by header content using Spring‚Äôs various request mapping (@RequestMapping, @GetMapping, @PostMapping, et al) annotations? Not only is it possible, it‚Äôs easy, and the implementation is concise &amp;amp; clean! Let‚Äôs take a look.¬† The code Here is a simple example that filters based upon the content-type of the header:</description>
    </item>
    
    <item>
      <title>T4SD (Tips 4 Spring Devs): Spring Boot Actuator /actuator endpoint</title>
      <link>https://thehecklers.com/post/t4sd-tips-4-spring-devs-spring-boot-actuator-actuator-endpoint/</link>
      <pubDate>Mon, 05 Jun 2017 20:46:17 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/t4sd-tips-4-spring-devs-spring-boot-actuator-actuator-endpoint/</guid>
      <description>Just a quick tip for the Spring fans out there&amp;#8230;&amp;#8203;
 If you‚Äôve decided to try out Spring Boot Actuator ‚Äì and if you haven‚Äôt you really should! ‚Äì¬†you may have run into one of two interesting hitches that are easily resolved:
  You are unable to access any¬†of the various Actuator endpoints (/beans, /env, et al)
  You can access those endpoints and yet are unable to access /actuator, the primary (navigable) Actuator endpoint</description>
    </item>
    
    <item>
      <title>Building a Portable, Self-powering, Cloud-Connected IoT demo</title>
      <link>https://thehecklers.com/post/building-a-portable-self-powering-cloud-connected-iot-demo/</link>
      <pubDate>Sun, 11 Sep 2016 00:00:21 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/building-a-portable-self-powering-cloud-connected-iot-demo/</guid>
      <description>Or ‚ÄúHow to build a portable self-powered, self-licking ice cream cone.‚Äù üòÄ
 
 Several years ago, I started building what I referred to affectionately as a self-licking ice cream cone: a Renewable Energy (RE) system that powered the same IoT system that monitored it. I‚Äôve given several talks about this system, both its hardware and its software stack, and there are so many useful (and scalable) lessons¬†I‚Äôve learned that I really enjoy sharing.</description>
    </item>
    
    <item>
      <title>T4SD (Tips 4 Spring Devs): Exposing Query Methods in Spring Data REST</title>
      <link>https://thehecklers.com/post/t4sd-tips-4-spring-devs-exposing-query-methods-in-spring-data-rest/</link>
      <pubDate>Tue, 26 Jul 2016 15:46:25 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/t4sd-tips-4-spring-devs-exposing-query-methods-in-spring-data-rest/</guid>
      <description>Spring Data REST¬†takes an opinionated approach to exposing Spring Data repositories¬†via REST endpoints, covering the 80-90% use case with a minimum of code and fuss. But did you know¬†that it provides a no-lifting-required mechanism for exposing query methods you define on those repositories as well?
 Let‚Äôs say you create a method like this:
 https://gist.github.com/hecklerm/df38b5b847e476ee35e3a6576bf31e78
 Referencing that bit of functionality directly is simple, just append /search/&amp;lt;methodName&amp;gt; to the collection endpoint:</description>
    </item>
    
    <item>
      <title>Spring Boot for IoT Developers: Getting Started</title>
      <link>https://thehecklers.com/post/spring-boot-for-iot-developers-getting-started/</link>
      <pubDate>Mon, 01 Feb 2016 16:18:32 -0600</pubDate>
      
      <guid>https://thehecklers.com/post/spring-boot-for-iot-developers-getting-started/</guid>
      <description>It often surprises other devs when I suggest that Spring Boot is a perfect addition to the IoT developer‚Äôs toolbox. If you‚Äôre deep into IoT and have the luxury of another group providing all of your back-end and/or cloud platform code, that‚Äôs perfectly understandable. However, if you‚Äôre a full-stack developer, by choice or necessity, you need to know this! Grab a chair and a cup of coffee; I think you‚Äôll find this interesting (and useful).</description>
    </item>
    
  </channel>
</rss>